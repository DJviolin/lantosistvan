#!/usr/bin/env node

'use strict';

/////////////////////////////////////////////////////////////
// MODULE DEPENDENCIES
/////////////////////////////////////////////////////////////

const app       = require('../app'),
      //debug     = require('debug')('www:server'),
      debug     = require('debug'),
      http      = require('http'),
      socket_io = require('socket.io');

/////////////////////////////////////////////////////////////
// Optimizations
/////////////////////////////////////////////////////////////

http.globalAgent.maxSockets = Infinity

/////////////////////////////////////////////////////////////
// INIT
/////////////////////////////////////////////////////////////

// Get port from environment and store in Express
const port = normalizePort(process.env.PORT || '8081');
app.set('port', port);
// http://expressjs.com/en/4x/api.html#app.set
// http://expressjs.com/en/guide/behind-proxies.html
// http://stackoverflow.com/a/23426060/1442219
app.set('trust proxy', true);
app.set('x-powered-by', false);

// Create HTTP server
// https://github.com/nodejs/node-v0.x-archive/blob/523929c9272a53c9429616564a45f2af59670e47/lib/http.js#L1903-L1905
//const server = http.createServer(app);
//const server = require('http').Server(app);
const server = http.Server(app);

// Socket.io
// SocketIO does not work with routes it works with sockets
// http://stackoverflow.com/a/33596348/1442219
// http://socket.io/get-started/chat/
/*const io = app.io
io.listen(server);*/
const io = socket_io.listen(server);
require('../sockets')(io);

// Listen on provided port, on all network interfaces
//server.listen(port);
server.listen(port, process.env.PRIVATE_IP_DOCKER || '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

// Debug
const err = debug('app:err'),
      log = debug('app:log');

/////////////////////////////////////////////////////////////
// Logging
/////////////////////////////////////////////////////////////

// Normalize a port into a number, string, or false
function normalizePort(val) {
  const port = parseInt(val, 10);
  if(isNaN(port)) {
    return val; // named pipe
  };
  if(port >= 0) {
    return port; // port number
  };
  return false;
};

// Event listener for HTTP server "error" event
function onError(error) {
  if(error.syscall !== 'listen') {
    throw error;
  };

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      //console.error(bind + ' requires elevated privileges');
      //debug(bind + ' requires elevated privileges');
      err(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      //console.error(bind + ' is already in use');
      //debug(bind + ' is already in use');
      err(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  };
};

//Event listener for HTTP server "listening" event
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  //debug('Listening on ' + bind);
  //debug('Listening on %s', bind);
  log('Listening on %s', bind);
};
