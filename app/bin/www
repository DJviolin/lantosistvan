#!/usr/bin/env node

'use strict';

/////////////////////////////////////////////////////////////
// MODULE DEPENDENCIES
/////////////////////////////////////////////////////////////

const app   = require('../app'),
      debug = require('debug')('lantosistvan-portfolio:server'),
      http  = require('http');

/////////////////////////////////////////////////////////////
// LET'S ENCRYPT
// https://github.com/nodejs/node-gyp
// https://letsencrypt.readthedocs.org/en/latest/using.html#manual
// https://www.npmjs.com/package/letsencrypt-express
// https://www.npmjs.com/package/letsencrypt
// https://www.npmjs.com/package/letsencrypt-cli
//
// https://lucaschmid.net/anotherblog/letsencrypt-express
// https://community.letsencrypt.org/t/node-js-configuration/5175/8
/////////////////////////////////////////////////////////////

/*const fs = require('fs'),
    https = require('https');
const options = {
  key: fs.readFileSync('../tls/privkey.pem'),
  cert: fs.readFileSync('../tls/fullchain.pem'),
  ca: fs.readFileSync('../tls/chain.pem')
};*/

/////////////////////////////////////////////////////////////
// INIT
/////////////////////////////////////////////////////////////

// Get port from environment and store in Express
//const port = normalizePort(process.env.PORT || '3000');
const port = normalizePort(process.env.PORT || '8080');
//const port = normalizePort(process.env.npm_package_config_port || '3000');
app.set('port', port);

// Create HTTP server
const server = http.createServer(app);
//const server = https.createServer(options, app); // Let's Encrypt

// Listen on provided port, on all network interfaces
//server.listen(port);
server.listen(port, process.env.APP_PRIVATE_IP_ADDRESS || '192.168.1.31');
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false
function normalizePort(val) {
  const port = parseInt(val, 10);
  if(isNaN(port)) {
    return val; // named pipe
  };
  if(port >= 0) {
    return port; // port number
  };
  return false;
}

// Event listener for HTTP server "error" event
function onError(error) {
  if(error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

//Event listener for HTTP server "listening" event
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
