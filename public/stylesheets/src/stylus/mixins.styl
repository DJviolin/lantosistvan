/////////////////////////////////////////////////////////////
// @font-face
// Usage: webfont('Crimson-Text-Roman', 'crimson-text', 'crimsontext-roman-webfont', true, normal, normal)
// Generator: http://transfonter.org/
// Compatibility: http://www.cssfontstack.com
/////////////////////////////////////////////////////////////

webfont(family, folder, file, hack-chrome-windows = false, weight = normal, style = normal)
  @font-face
    font-family family
    src url('../fonts/' + folder + '/' + file + '.eot')
    src url('../fonts/' + folder + '/' + file + '.eot?#iefix') format('embedded-opentype'),
        url('../fonts/' + folder + '/' + file + '.woff2') format('woff2'),
        url('../fonts/' + folder + '/' + file + '.woff') format('woff'),
        url('../fonts/' + folder + '/' + file + '.ttf') format('truetype'),
        url('../fonts/' + folder + '/' + file + '.svg#' + family) format('svg')
    font-weight weight
    font-style style
  if hack-chrome-windows
    @media screen and (-webkit-min-device-pixel-ratio:0)
      @font-face
        font-family family
        src url('../fonts/' + folder + '/' + file + '.svg#'+ family) format('svg')

/////////////////////////////////////////////////////////////
// px to rem mixin fallback
// rem allows us to compute element's font-size relative to the root "html" element
/////////////////////////////////////////////////////////////

font-size(value) {
  font-size: value; // px to rem mixin: add px (or original value) as backup

  if (value is inherit || value is 0 || unit(value) is 'em') {
    return; // do nothing, "inherit" has no unit, "em" unmodified
  } else {
    font-size: remify(value);
  }
}

remify(value) { // separate mixin, so it can be used elsewhere
  u = unit(value);

  if (u is 'px') {
    return unit(value/16, 'rem'); // Should be the same as the font-size on "html" element
  } else {
    return unit(value, u);
  }
}

/////////////////////////////////////////////////////////////
// Flexbox
/////////////////////////////////////////////////////////////

displayFlex()
  display: -webkit-flex
  display: flex

flex()
  -webkit-flex: arguments
  flex: arguments

flex-wrap()
  -webkit-flex-wrap: arguments
  flex-wrap: arguments

flex-direction()
  -ms-flex-direction: arguments
  -webkit-flex-direction: arguments
  flex-direction: arguments

align-items()
  -webkit-align-items: arguments
  align-items: arguments

justify-content()
  -webkit-justify-content: arguments
  justify-content: arguments

/////////////////////////////////////////////////////////////
// Transitions
/////////////////////////////////////////////////////////////

transition()
  -o-transition: arguments
  -moz-transition: arguments
  -webkit-transition: arguments
  transition: arguments

transform()
  -o-transform: arguments
  -ms-transform: arguments
  -moz-transform: arguments
  -webkit-transform: arguments
  transform: arguments

transform-style()
  -o-transform-style: arguments
  -ms-transform-style: arguments
  -moz-transform-style: arguments
  -webkit-transform-style: arguments
  transform-style: arguments

/////////////////////////////////////////////////////////////
// Misc
/////////////////////////////////////////////////////////////

box-shadow()
  -webkit-box-shadow: arguments
  -moz-box-shadow: arguments
  box-shadow: arguments

perspective()
  -o-perspective: arguments
  -ms-perspective: arguments
  -moz-perspective: arguments
  -webkit-perspective: arguments
  perspective: arguments

box-sizing()
  -o-box-sizing: arguments
  -ms-box-sizing: arguments
  -moz-box-sizing: arguments
  -webkit-box-sizing: arguments
  box-sizing: arguments

user-select()
  -ms-user-select: arguments
  -moz-user-select: arguments
  -webkit-user-select: arguments
  user-select: arguments

touch-action()
  -ms-touch-action: arguments
  touch-action: arguments
